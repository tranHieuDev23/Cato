// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wiring

import (
	"github.com/google/wire"
	"github.com/tranHieuDev23/cato/internal/app"
	"github.com/tranHieuDev23/cato/internal/configs"
	"github.com/tranHieuDev23/cato/internal/dataaccess"
	"github.com/tranHieuDev23/cato/internal/dataaccess/cato"
	"github.com/tranHieuDev23/cato/internal/dataaccess/db"
	"github.com/tranHieuDev23/cato/internal/handlers"
	"github.com/tranHieuDev23/cato/internal/handlers/http"
	"github.com/tranHieuDev23/cato/internal/handlers/http/middlewares"
	"github.com/tranHieuDev23/cato/internal/handlers/jobs"
	"github.com/tranHieuDev23/cato/internal/logic"
	"github.com/tranHieuDev23/cato/internal/utils"
)

// Injectors from wire.go:

func InitializeHost(filePath configs.ConfigFilePath, args utils.Arguments) (*app.Host, func(), error) {
	config, err := configs.NewConfig(filePath)
	if err != nil {
		return nil, nil, err
	}
	auth := config.Auth
	hash := auth.Hash
	log := config.Log
	logger, cleanup, err := utils.InitializeLogger(log)
	if err != nil {
		return nil, nil, err
	}
	logicHash := logic.NewHash(hash, logger)
	database := config.Database
	gormDB, err := db.InitializeDB(logger, database)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	accountDataAccessor := db.NewAccountDataAccessor(gormDB, logger)
	tokenPublicKeyDataAccessor := db.NewTokenPublicKeyDataAccessor(gormDB, logger)
	token := auth.Token
	logicToken, err := logic.NewToken(accountDataAccessor, tokenPublicKeyDataAccessor, token, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	role := logic.NewRole(logger)
	accountPasswordDataAccessor := db.NewAccountPasswordDataAccessor(gormDB, logger)
	configsLogic := config.Logic
	account := logic.NewAccount(logicHash, logicToken, role, accountDataAccessor, accountPasswordDataAccessor, gormDB, logger, configsLogic, args)
	createFirstAccounts := jobs.NewCreateFirstAccounts(account)
	problemDataAccessor := db.NewProblemDataAccessor(gormDB, logger)
	submissionDataAccessor := db.NewSubmissionDataAccessor(gormDB, logger)
	testCaseDataAccessor := db.NewTestCaseDataAccessor(gormDB, logger)
	problemTestCaseHashDataAccessor := db.NewProblemTestCaseHashDataAccessor(gormDB, logger)
	client, err := utils.InitializeDockerClient()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	httpClientWithAuthToken, err := cato.NewHTTPClientWithAuthToken(args, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	apiClient := cato.InitializeAuthenticatedClient(args, httpClientWithAuthToken)
	judge, err := logic.NewJudge(problemDataAccessor, submissionDataAccessor, testCaseDataAccessor, problemTestCaseHashDataAccessor, client, gormDB, apiClient, logger, configsLogic, args)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	submission, err := logic.NewSubmission(logicToken, role, judge, accountDataAccessor, problemDataAccessor, submissionDataAccessor, gormDB, logger, args, configsLogic)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	scheduleSubmittedExecutingSubmissionToJudge := jobs.NewScheduleSubmittedExecutingSubmissionToJudge(submission)
	revertExecutingSubmissions := jobs.NewRevertExecutingSubmissions(submission)
	testCase := logic.NewTestCase(logicToken, role, problemDataAccessor, testCaseDataAccessor, problemTestCaseHashDataAccessor, gormDB, apiClient, logger, configsLogic)
	problemExampleDataAccessor := db.NewProblemExampleDataAccessor(gormDB, logger)
	problem := logic.NewProblem(logicToken, role, testCase, accountDataAccessor, problemDataAccessor, problemExampleDataAccessor, problemTestCaseHashDataAccessor, testCaseDataAccessor, submissionDataAccessor, logger, gormDB, apiClient, configsLogic)
	apiServer := http.NewAPIServerHandler(account, problem, testCase, submission, configsLogic, logger, args)
	v := middlewares.InitializePJRPCMiddlewareList()
	httpAuth, err := middlewares.NewHTTPAuth(logicToken, token, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	v2 := middlewares.InitalizeHTTPMiddlewareList(httpAuth)
	spaHandler := http.NewSPAHandler()
	configsHTTP := config.HTTP
	server := http.NewServer(apiServer, v, v2, spaHandler, logger, configsHTTP, args)
	cron, cleanup2 := utils.InitializeCron()
	host := app.NewHost(createFirstAccounts, scheduleSubmittedExecutingSubmissionToJudge, revertExecutingSubmissions, server, logger, cron, configsLogic)
	return host, func() {
		cleanup2()
		cleanup()
	}, nil
}

func InitializeWorker(filePath configs.ConfigFilePath, args utils.Arguments) (*app.Worker, func(), error) {
	config, err := configs.NewConfig(filePath)
	if err != nil {
		return nil, nil, err
	}
	log := config.Log
	logger, cleanup, err := utils.InitializeLogger(log)
	if err != nil {
		return nil, nil, err
	}
	database := config.Database
	gormDB, err := db.InitializeDB(logger, database)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	accountDataAccessor := db.NewAccountDataAccessor(gormDB, logger)
	tokenPublicKeyDataAccessor := db.NewTokenPublicKeyDataAccessor(gormDB, logger)
	auth := config.Auth
	token := auth.Token
	logicToken, err := logic.NewToken(accountDataAccessor, tokenPublicKeyDataAccessor, token, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	role := logic.NewRole(logger)
	problemDataAccessor := db.NewProblemDataAccessor(gormDB, logger)
	submissionDataAccessor := db.NewSubmissionDataAccessor(gormDB, logger)
	testCaseDataAccessor := db.NewTestCaseDataAccessor(gormDB, logger)
	problemTestCaseHashDataAccessor := db.NewProblemTestCaseHashDataAccessor(gormDB, logger)
	client, err := utils.InitializeDockerClient()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	httpClientWithAuthToken, err := cato.NewHTTPClientWithAuthToken(args, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	apiClient := cato.InitializeAuthenticatedClient(args, httpClientWithAuthToken)
	configsLogic := config.Logic
	judge, err := logic.NewJudge(problemDataAccessor, submissionDataAccessor, testCaseDataAccessor, problemTestCaseHashDataAccessor, client, gormDB, apiClient, logger, configsLogic, args)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	submission, err := logic.NewSubmission(logicToken, role, judge, accountDataAccessor, problemDataAccessor, submissionDataAccessor, gormDB, logger, args, configsLogic)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	scheduleSubmittedExecutingSubmissionToJudge := jobs.NewScheduleSubmittedExecutingSubmissionToJudge(submission)
	testCase := logic.NewTestCase(logicToken, role, problemDataAccessor, testCaseDataAccessor, problemTestCaseHashDataAccessor, gormDB, apiClient, logger, configsLogic)
	problemExampleDataAccessor := db.NewProblemExampleDataAccessor(gormDB, logger)
	problem := logic.NewProblem(logicToken, role, testCase, accountDataAccessor, problemDataAccessor, problemExampleDataAccessor, problemTestCaseHashDataAccessor, testCaseDataAccessor, submissionDataAccessor, logger, gormDB, apiClient, configsLogic)
	syncProblems := jobs.NewSyncProblems(problem)
	judgeDistributedFirstSubmittedSubmission := jobs.NewJudgeDistributedFirstSubmittedSubmission(judge)
	cron, cleanup2 := utils.InitializeCron()
	worker := app.NewWorker(scheduleSubmittedExecutingSubmissionToJudge, syncProblems, judgeDistributedFirstSubmittedSubmission, logger, cron, configsLogic)
	return worker, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var WireSet = wire.NewSet(utils.WireSet, configs.WireSet, dataaccess.WireSet, logic.WireSet, handlers.WireSet, app.WireSet)
