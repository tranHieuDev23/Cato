// Code generated by genpjrpc. DO NOT EDIT.
//  genpjrpc version: v0.4.0

package rpcserver

import (
	"context"
	"encoding/json"
	"fmt"

	pjrpc "gitlab.com/pjrpc/pjrpc/v2"
	"gitlab.com/pjrpc/pjrpc/v2/pjson"

	"github.com/tranHieuDev23/cato/internal/handlers/http/rpc"
)

// List of the server JSON-RPC methods.
const (
	JSONRPCMethodEcho = "echo"
)

// APIServer is an API server for API service.
type APIServer interface {
	Echo(ctx context.Context, in *rpc.EchoRequest) (*rpc.EchoResponse, error)
}

type regAPI struct {
	svc APIServer
}

// RegisterAPIServer registers rpc handlers with middlewares in the server router.
func RegisterAPIServer(srv pjrpc.Registrator, svc APIServer, middlewares ...pjrpc.Middleware) {
	r := &regAPI{svc: svc}

	srv.RegisterMethod(JSONRPCMethodEcho, r.regEcho)

	srv.With(middlewares...)
}

func (r *regAPI) regEcho(ctx context.Context, params json.RawMessage) (any, error) {
	in := new(rpc.EchoRequest)
	if len(params) != 0 {
		if err := pjson.Unmarshal(params, in); err != nil {
			return nil, pjrpc.JRPCErrParseError("failed to parse params")
		}
	}

	res, err := r.svc.Echo(ctx, in)
	if err != nil {
		return nil, fmt.Errorf("failed Echo: %w", err)
	}

	return res, nil
}
