/* tslint:disable */
/* eslint-disable */
/**
 * API
 * Generated by genpjrpc: v0.4.0
 *
 * The version of the OpenAPI document: v0.0.0-unknown
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RequestBodyOfTheEchoMethod,
  ResponseBodyOfTheEchoMethod,
} from '../models/index';
import {
    RequestBodyOfTheEchoMethodFromJSON,
    RequestBodyOfTheEchoMethodToJSON,
    ResponseBodyOfTheEchoMethodFromJSON,
    ResponseBodyOfTheEchoMethodToJSON,
} from '../models/index';

export interface EchoRequest {
    requestBodyOfTheEchoMethod: RequestBodyOfTheEchoMethod;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async echoRaw(requestParameters: EchoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheEchoMethod>> {
        if (requestParameters.requestBodyOfTheEchoMethod === null || requestParameters.requestBodyOfTheEchoMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheEchoMethod','Required parameter requestParameters.requestBodyOfTheEchoMethod was null or undefined when calling echo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#echo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheEchoMethodToJSON(requestParameters.requestBodyOfTheEchoMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheEchoMethodFromJSON(jsonValue));
    }

    /**
     */
    async echo(requestParameters: EchoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheEchoMethod> {
        const response = await this.echoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
