/* tslint:disable */
/* eslint-disable */
/**
 * API
 * Generated by genpjrpc: v0.4.0
 *
 * The version of the OpenAPI document: v0.0.0-unknown
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RequestBodyOfTheCreateAccountMethod,
  RequestBodyOfTheCreateProblemMethod,
  RequestBodyOfTheCreateSessionMethod,
  RequestBodyOfTheCreateSubmissionMethod,
  RequestBodyOfTheCreateTestCaseListMethod,
  RequestBodyOfTheCreateTestCaseMethod,
  RequestBodyOfTheDeleteProblemMethod,
  RequestBodyOfTheDeleteSessionMethod,
  RequestBodyOfTheDeleteSubmissionMethod,
  RequestBodyOfTheDeleteTestCaseMethod,
  RequestBodyOfTheGetAccountListMethod,
  RequestBodyOfTheGetAccountMethod,
  RequestBodyOfTheGetAccountProblemSnippetListMethod,
  RequestBodyOfTheGetAccountProblemSubmissionSnippetListMethod,
  RequestBodyOfTheGetAccountSubmissionSnippetListMethod,
  RequestBodyOfTheGetProblemMethod,
  RequestBodyOfTheGetProblemSnippetListMethod,
  RequestBodyOfTheGetProblemSubmissionSnippetListMethod,
  RequestBodyOfTheGetProblemTestCaseSnippetListMethod,
  RequestBodyOfTheGetServerInfoMethod,
  RequestBodyOfTheGetSessionMethod,
  RequestBodyOfTheGetSubmissionMethod,
  RequestBodyOfTheGetSubmissionSnippetListMethod,
  RequestBodyOfTheGetTestCaseMethod,
  RequestBodyOfTheUpdateAccountMethod,
  RequestBodyOfTheUpdateProblemMethod,
  RequestBodyOfTheUpdateTestCaseMethod,
  ResponseBodyOfTheCreateAccountMethod,
  ResponseBodyOfTheCreateProblemMethod,
  ResponseBodyOfTheCreateSessionMethod,
  ResponseBodyOfTheCreateSubmissionMethod,
  ResponseBodyOfTheCreateTestCaseListMethod,
  ResponseBodyOfTheCreateTestCaseMethod,
  ResponseBodyOfTheDeleteProblemMethod,
  ResponseBodyOfTheDeleteSessionMethod,
  ResponseBodyOfTheDeleteSubmissionMethod,
  ResponseBodyOfTheDeleteTestCaseMethod,
  ResponseBodyOfTheGetAccountListMethod,
  ResponseBodyOfTheGetAccountMethod,
  ResponseBodyOfTheGetAccountProblemSnippetListMethod,
  ResponseBodyOfTheGetAccountProblemSubmissionSnippetListMethod,
  ResponseBodyOfTheGetAccountSubmissionSnippetListMethod,
  ResponseBodyOfTheGetProblemMethod,
  ResponseBodyOfTheGetProblemSnippetListMethod,
  ResponseBodyOfTheGetProblemSubmissionSnippetListMethod,
  ResponseBodyOfTheGetProblemTestCaseSnippetListMethod,
  ResponseBodyOfTheGetServerInfoMethod,
  ResponseBodyOfTheGetSessionMethod,
  ResponseBodyOfTheGetSubmissionMethod,
  ResponseBodyOfTheGetSubmissionSnippetListMethod,
  ResponseBodyOfTheGetTestCaseMethod,
  ResponseBodyOfTheUpdateAccountMethod,
  ResponseBodyOfTheUpdateProblemMethod,
  ResponseBodyOfTheUpdateTestCaseMethod,
} from '../models/index';
import {
    RequestBodyOfTheCreateAccountMethodFromJSON,
    RequestBodyOfTheCreateAccountMethodToJSON,
    RequestBodyOfTheCreateProblemMethodFromJSON,
    RequestBodyOfTheCreateProblemMethodToJSON,
    RequestBodyOfTheCreateSessionMethodFromJSON,
    RequestBodyOfTheCreateSessionMethodToJSON,
    RequestBodyOfTheCreateSubmissionMethodFromJSON,
    RequestBodyOfTheCreateSubmissionMethodToJSON,
    RequestBodyOfTheCreateTestCaseListMethodFromJSON,
    RequestBodyOfTheCreateTestCaseListMethodToJSON,
    RequestBodyOfTheCreateTestCaseMethodFromJSON,
    RequestBodyOfTheCreateTestCaseMethodToJSON,
    RequestBodyOfTheDeleteProblemMethodFromJSON,
    RequestBodyOfTheDeleteProblemMethodToJSON,
    RequestBodyOfTheDeleteSessionMethodFromJSON,
    RequestBodyOfTheDeleteSessionMethodToJSON,
    RequestBodyOfTheDeleteSubmissionMethodFromJSON,
    RequestBodyOfTheDeleteSubmissionMethodToJSON,
    RequestBodyOfTheDeleteTestCaseMethodFromJSON,
    RequestBodyOfTheDeleteTestCaseMethodToJSON,
    RequestBodyOfTheGetAccountListMethodFromJSON,
    RequestBodyOfTheGetAccountListMethodToJSON,
    RequestBodyOfTheGetAccountMethodFromJSON,
    RequestBodyOfTheGetAccountMethodToJSON,
    RequestBodyOfTheGetAccountProblemSnippetListMethodFromJSON,
    RequestBodyOfTheGetAccountProblemSnippetListMethodToJSON,
    RequestBodyOfTheGetAccountProblemSubmissionSnippetListMethodFromJSON,
    RequestBodyOfTheGetAccountProblemSubmissionSnippetListMethodToJSON,
    RequestBodyOfTheGetAccountSubmissionSnippetListMethodFromJSON,
    RequestBodyOfTheGetAccountSubmissionSnippetListMethodToJSON,
    RequestBodyOfTheGetProblemMethodFromJSON,
    RequestBodyOfTheGetProblemMethodToJSON,
    RequestBodyOfTheGetProblemSnippetListMethodFromJSON,
    RequestBodyOfTheGetProblemSnippetListMethodToJSON,
    RequestBodyOfTheGetProblemSubmissionSnippetListMethodFromJSON,
    RequestBodyOfTheGetProblemSubmissionSnippetListMethodToJSON,
    RequestBodyOfTheGetProblemTestCaseSnippetListMethodFromJSON,
    RequestBodyOfTheGetProblemTestCaseSnippetListMethodToJSON,
    RequestBodyOfTheGetServerInfoMethodFromJSON,
    RequestBodyOfTheGetServerInfoMethodToJSON,
    RequestBodyOfTheGetSessionMethodFromJSON,
    RequestBodyOfTheGetSessionMethodToJSON,
    RequestBodyOfTheGetSubmissionMethodFromJSON,
    RequestBodyOfTheGetSubmissionMethodToJSON,
    RequestBodyOfTheGetSubmissionSnippetListMethodFromJSON,
    RequestBodyOfTheGetSubmissionSnippetListMethodToJSON,
    RequestBodyOfTheGetTestCaseMethodFromJSON,
    RequestBodyOfTheGetTestCaseMethodToJSON,
    RequestBodyOfTheUpdateAccountMethodFromJSON,
    RequestBodyOfTheUpdateAccountMethodToJSON,
    RequestBodyOfTheUpdateProblemMethodFromJSON,
    RequestBodyOfTheUpdateProblemMethodToJSON,
    RequestBodyOfTheUpdateTestCaseMethodFromJSON,
    RequestBodyOfTheUpdateTestCaseMethodToJSON,
    ResponseBodyOfTheCreateAccountMethodFromJSON,
    ResponseBodyOfTheCreateAccountMethodToJSON,
    ResponseBodyOfTheCreateProblemMethodFromJSON,
    ResponseBodyOfTheCreateProblemMethodToJSON,
    ResponseBodyOfTheCreateSessionMethodFromJSON,
    ResponseBodyOfTheCreateSessionMethodToJSON,
    ResponseBodyOfTheCreateSubmissionMethodFromJSON,
    ResponseBodyOfTheCreateSubmissionMethodToJSON,
    ResponseBodyOfTheCreateTestCaseListMethodFromJSON,
    ResponseBodyOfTheCreateTestCaseListMethodToJSON,
    ResponseBodyOfTheCreateTestCaseMethodFromJSON,
    ResponseBodyOfTheCreateTestCaseMethodToJSON,
    ResponseBodyOfTheDeleteProblemMethodFromJSON,
    ResponseBodyOfTheDeleteProblemMethodToJSON,
    ResponseBodyOfTheDeleteSessionMethodFromJSON,
    ResponseBodyOfTheDeleteSessionMethodToJSON,
    ResponseBodyOfTheDeleteSubmissionMethodFromJSON,
    ResponseBodyOfTheDeleteSubmissionMethodToJSON,
    ResponseBodyOfTheDeleteTestCaseMethodFromJSON,
    ResponseBodyOfTheDeleteTestCaseMethodToJSON,
    ResponseBodyOfTheGetAccountListMethodFromJSON,
    ResponseBodyOfTheGetAccountListMethodToJSON,
    ResponseBodyOfTheGetAccountMethodFromJSON,
    ResponseBodyOfTheGetAccountMethodToJSON,
    ResponseBodyOfTheGetAccountProblemSnippetListMethodFromJSON,
    ResponseBodyOfTheGetAccountProblemSnippetListMethodToJSON,
    ResponseBodyOfTheGetAccountProblemSubmissionSnippetListMethodFromJSON,
    ResponseBodyOfTheGetAccountProblemSubmissionSnippetListMethodToJSON,
    ResponseBodyOfTheGetAccountSubmissionSnippetListMethodFromJSON,
    ResponseBodyOfTheGetAccountSubmissionSnippetListMethodToJSON,
    ResponseBodyOfTheGetProblemMethodFromJSON,
    ResponseBodyOfTheGetProblemMethodToJSON,
    ResponseBodyOfTheGetProblemSnippetListMethodFromJSON,
    ResponseBodyOfTheGetProblemSnippetListMethodToJSON,
    ResponseBodyOfTheGetProblemSubmissionSnippetListMethodFromJSON,
    ResponseBodyOfTheGetProblemSubmissionSnippetListMethodToJSON,
    ResponseBodyOfTheGetProblemTestCaseSnippetListMethodFromJSON,
    ResponseBodyOfTheGetProblemTestCaseSnippetListMethodToJSON,
    ResponseBodyOfTheGetServerInfoMethodFromJSON,
    ResponseBodyOfTheGetServerInfoMethodToJSON,
    ResponseBodyOfTheGetSessionMethodFromJSON,
    ResponseBodyOfTheGetSessionMethodToJSON,
    ResponseBodyOfTheGetSubmissionMethodFromJSON,
    ResponseBodyOfTheGetSubmissionMethodToJSON,
    ResponseBodyOfTheGetSubmissionSnippetListMethodFromJSON,
    ResponseBodyOfTheGetSubmissionSnippetListMethodToJSON,
    ResponseBodyOfTheGetTestCaseMethodFromJSON,
    ResponseBodyOfTheGetTestCaseMethodToJSON,
    ResponseBodyOfTheUpdateAccountMethodFromJSON,
    ResponseBodyOfTheUpdateAccountMethodToJSON,
    ResponseBodyOfTheUpdateProblemMethodFromJSON,
    ResponseBodyOfTheUpdateProblemMethodToJSON,
    ResponseBodyOfTheUpdateTestCaseMethodFromJSON,
    ResponseBodyOfTheUpdateTestCaseMethodToJSON,
} from '../models/index';

export interface CreateAccountRequest {
    requestBodyOfTheCreateAccountMethod: RequestBodyOfTheCreateAccountMethod;
}

export interface CreateProblemRequest {
    requestBodyOfTheCreateProblemMethod: RequestBodyOfTheCreateProblemMethod;
}

export interface CreateSessionRequest {
    requestBodyOfTheCreateSessionMethod: RequestBodyOfTheCreateSessionMethod;
}

export interface CreateSubmissionRequest {
    requestBodyOfTheCreateSubmissionMethod: RequestBodyOfTheCreateSubmissionMethod;
}

export interface CreateTestCaseRequest {
    requestBodyOfTheCreateTestCaseMethod: RequestBodyOfTheCreateTestCaseMethod;
}

export interface CreateTestCaseListRequest {
    requestBodyOfTheCreateTestCaseListMethod: RequestBodyOfTheCreateTestCaseListMethod;
}

export interface DeleteProblemRequest {
    requestBodyOfTheDeleteProblemMethod: RequestBodyOfTheDeleteProblemMethod;
}

export interface DeleteSessionRequest {
    requestBodyOfTheDeleteSessionMethod: RequestBodyOfTheDeleteSessionMethod;
}

export interface DeleteSubmissionRequest {
    requestBodyOfTheDeleteSubmissionMethod: RequestBodyOfTheDeleteSubmissionMethod;
}

export interface DeleteTestCaseRequest {
    requestBodyOfTheDeleteTestCaseMethod: RequestBodyOfTheDeleteTestCaseMethod;
}

export interface GetAccountRequest {
    requestBodyOfTheGetAccountMethod: RequestBodyOfTheGetAccountMethod;
}

export interface GetAccountListRequest {
    requestBodyOfTheGetAccountListMethod: RequestBodyOfTheGetAccountListMethod;
}

export interface GetAccountProblemSnippetListRequest {
    requestBodyOfTheGetAccountProblemSnippetListMethod: RequestBodyOfTheGetAccountProblemSnippetListMethod;
}

export interface GetAccountProblemSubmissionSnippetListRequest {
    requestBodyOfTheGetAccountProblemSubmissionSnippetListMethod: RequestBodyOfTheGetAccountProblemSubmissionSnippetListMethod;
}

export interface GetAccountSubmissionSnippetListRequest {
    requestBodyOfTheGetAccountSubmissionSnippetListMethod: RequestBodyOfTheGetAccountSubmissionSnippetListMethod;
}

export interface GetProblemRequest {
    requestBodyOfTheGetProblemMethod: RequestBodyOfTheGetProblemMethod;
}

export interface GetProblemSnippetListRequest {
    requestBodyOfTheGetProblemSnippetListMethod: RequestBodyOfTheGetProblemSnippetListMethod;
}

export interface GetProblemSubmissionSnippetListRequest {
    requestBodyOfTheGetProblemSubmissionSnippetListMethod: RequestBodyOfTheGetProblemSubmissionSnippetListMethod;
}

export interface GetProblemTestCaseSnippetListRequest {
    requestBodyOfTheGetProblemTestCaseSnippetListMethod: RequestBodyOfTheGetProblemTestCaseSnippetListMethod;
}

export interface GetServerInfoRequest {
    requestBodyOfTheGetServerInfoMethod: RequestBodyOfTheGetServerInfoMethod;
}

export interface GetSessionRequest {
    requestBodyOfTheGetSessionMethod: RequestBodyOfTheGetSessionMethod;
}

export interface GetSubmissionRequest {
    requestBodyOfTheGetSubmissionMethod: RequestBodyOfTheGetSubmissionMethod;
}

export interface GetSubmissionSnippetListRequest {
    requestBodyOfTheGetSubmissionSnippetListMethod: RequestBodyOfTheGetSubmissionSnippetListMethod;
}

export interface GetTestCaseRequest {
    requestBodyOfTheGetTestCaseMethod: RequestBodyOfTheGetTestCaseMethod;
}

export interface UpdateAccountRequest {
    requestBodyOfTheUpdateAccountMethod: RequestBodyOfTheUpdateAccountMethod;
}

export interface UpdateProblemRequest {
    requestBodyOfTheUpdateProblemMethod: RequestBodyOfTheUpdateProblemMethod;
}

export interface UpdateTestCaseRequest {
    requestBodyOfTheUpdateTestCaseMethod: RequestBodyOfTheUpdateTestCaseMethod;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async createAccountRaw(requestParameters: CreateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheCreateAccountMethod>> {
        if (requestParameters.requestBodyOfTheCreateAccountMethod === null || requestParameters.requestBodyOfTheCreateAccountMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheCreateAccountMethod','Required parameter requestParameters.requestBodyOfTheCreateAccountMethod was null or undefined when calling createAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#create_account`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheCreateAccountMethodToJSON(requestParameters.requestBodyOfTheCreateAccountMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheCreateAccountMethodFromJSON(jsonValue));
    }

    /**
     */
    async createAccount(requestParameters: CreateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheCreateAccountMethod> {
        const response = await this.createAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createProblemRaw(requestParameters: CreateProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheCreateProblemMethod>> {
        if (requestParameters.requestBodyOfTheCreateProblemMethod === null || requestParameters.requestBodyOfTheCreateProblemMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheCreateProblemMethod','Required parameter requestParameters.requestBodyOfTheCreateProblemMethod was null or undefined when calling createProblem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#create_problem`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheCreateProblemMethodToJSON(requestParameters.requestBodyOfTheCreateProblemMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheCreateProblemMethodFromJSON(jsonValue));
    }

    /**
     */
    async createProblem(requestParameters: CreateProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheCreateProblemMethod> {
        const response = await this.createProblemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createSessionRaw(requestParameters: CreateSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheCreateSessionMethod>> {
        if (requestParameters.requestBodyOfTheCreateSessionMethod === null || requestParameters.requestBodyOfTheCreateSessionMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheCreateSessionMethod','Required parameter requestParameters.requestBodyOfTheCreateSessionMethod was null or undefined when calling createSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#create_session`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheCreateSessionMethodToJSON(requestParameters.requestBodyOfTheCreateSessionMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheCreateSessionMethodFromJSON(jsonValue));
    }

    /**
     */
    async createSession(requestParameters: CreateSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheCreateSessionMethod> {
        const response = await this.createSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createSubmissionRaw(requestParameters: CreateSubmissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheCreateSubmissionMethod>> {
        if (requestParameters.requestBodyOfTheCreateSubmissionMethod === null || requestParameters.requestBodyOfTheCreateSubmissionMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheCreateSubmissionMethod','Required parameter requestParameters.requestBodyOfTheCreateSubmissionMethod was null or undefined when calling createSubmission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#create_submission`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheCreateSubmissionMethodToJSON(requestParameters.requestBodyOfTheCreateSubmissionMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheCreateSubmissionMethodFromJSON(jsonValue));
    }

    /**
     */
    async createSubmission(requestParameters: CreateSubmissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheCreateSubmissionMethod> {
        const response = await this.createSubmissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createTestCaseRaw(requestParameters: CreateTestCaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheCreateTestCaseMethod>> {
        if (requestParameters.requestBodyOfTheCreateTestCaseMethod === null || requestParameters.requestBodyOfTheCreateTestCaseMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheCreateTestCaseMethod','Required parameter requestParameters.requestBodyOfTheCreateTestCaseMethod was null or undefined when calling createTestCase.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#create_test_case`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheCreateTestCaseMethodToJSON(requestParameters.requestBodyOfTheCreateTestCaseMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheCreateTestCaseMethodFromJSON(jsonValue));
    }

    /**
     */
    async createTestCase(requestParameters: CreateTestCaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheCreateTestCaseMethod> {
        const response = await this.createTestCaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createTestCaseListRaw(requestParameters: CreateTestCaseListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheCreateTestCaseListMethod>> {
        if (requestParameters.requestBodyOfTheCreateTestCaseListMethod === null || requestParameters.requestBodyOfTheCreateTestCaseListMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheCreateTestCaseListMethod','Required parameter requestParameters.requestBodyOfTheCreateTestCaseListMethod was null or undefined when calling createTestCaseList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#create_test_case_list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheCreateTestCaseListMethodToJSON(requestParameters.requestBodyOfTheCreateTestCaseListMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheCreateTestCaseListMethodFromJSON(jsonValue));
    }

    /**
     */
    async createTestCaseList(requestParameters: CreateTestCaseListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheCreateTestCaseListMethod> {
        const response = await this.createTestCaseListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteProblemRaw(requestParameters: DeleteProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheDeleteProblemMethod>> {
        if (requestParameters.requestBodyOfTheDeleteProblemMethod === null || requestParameters.requestBodyOfTheDeleteProblemMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheDeleteProblemMethod','Required parameter requestParameters.requestBodyOfTheDeleteProblemMethod was null or undefined when calling deleteProblem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#delete_problem`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheDeleteProblemMethodToJSON(requestParameters.requestBodyOfTheDeleteProblemMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheDeleteProblemMethodFromJSON(jsonValue));
    }

    /**
     */
    async deleteProblem(requestParameters: DeleteProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheDeleteProblemMethod> {
        const response = await this.deleteProblemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteSessionRaw(requestParameters: DeleteSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheDeleteSessionMethod>> {
        if (requestParameters.requestBodyOfTheDeleteSessionMethod === null || requestParameters.requestBodyOfTheDeleteSessionMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheDeleteSessionMethod','Required parameter requestParameters.requestBodyOfTheDeleteSessionMethod was null or undefined when calling deleteSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#delete_session`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheDeleteSessionMethodToJSON(requestParameters.requestBodyOfTheDeleteSessionMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheDeleteSessionMethodFromJSON(jsonValue));
    }

    /**
     */
    async deleteSession(requestParameters: DeleteSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheDeleteSessionMethod> {
        const response = await this.deleteSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteSubmissionRaw(requestParameters: DeleteSubmissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheDeleteSubmissionMethod>> {
        if (requestParameters.requestBodyOfTheDeleteSubmissionMethod === null || requestParameters.requestBodyOfTheDeleteSubmissionMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheDeleteSubmissionMethod','Required parameter requestParameters.requestBodyOfTheDeleteSubmissionMethod was null or undefined when calling deleteSubmission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#delete_submission`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheDeleteSubmissionMethodToJSON(requestParameters.requestBodyOfTheDeleteSubmissionMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheDeleteSubmissionMethodFromJSON(jsonValue));
    }

    /**
     */
    async deleteSubmission(requestParameters: DeleteSubmissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheDeleteSubmissionMethod> {
        const response = await this.deleteSubmissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteTestCaseRaw(requestParameters: DeleteTestCaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheDeleteTestCaseMethod>> {
        if (requestParameters.requestBodyOfTheDeleteTestCaseMethod === null || requestParameters.requestBodyOfTheDeleteTestCaseMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheDeleteTestCaseMethod','Required parameter requestParameters.requestBodyOfTheDeleteTestCaseMethod was null or undefined when calling deleteTestCase.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#delete_test_case`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheDeleteTestCaseMethodToJSON(requestParameters.requestBodyOfTheDeleteTestCaseMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheDeleteTestCaseMethodFromJSON(jsonValue));
    }

    /**
     */
    async deleteTestCase(requestParameters: DeleteTestCaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheDeleteTestCaseMethod> {
        const response = await this.deleteTestCaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAccountRaw(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheGetAccountMethod>> {
        if (requestParameters.requestBodyOfTheGetAccountMethod === null || requestParameters.requestBodyOfTheGetAccountMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheGetAccountMethod','Required parameter requestParameters.requestBodyOfTheGetAccountMethod was null or undefined when calling getAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#get_account`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheGetAccountMethodToJSON(requestParameters.requestBodyOfTheGetAccountMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheGetAccountMethodFromJSON(jsonValue));
    }

    /**
     */
    async getAccount(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheGetAccountMethod> {
        const response = await this.getAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAccountListRaw(requestParameters: GetAccountListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheGetAccountListMethod>> {
        if (requestParameters.requestBodyOfTheGetAccountListMethod === null || requestParameters.requestBodyOfTheGetAccountListMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheGetAccountListMethod','Required parameter requestParameters.requestBodyOfTheGetAccountListMethod was null or undefined when calling getAccountList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#get_account_list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheGetAccountListMethodToJSON(requestParameters.requestBodyOfTheGetAccountListMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheGetAccountListMethodFromJSON(jsonValue));
    }

    /**
     */
    async getAccountList(requestParameters: GetAccountListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheGetAccountListMethod> {
        const response = await this.getAccountListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAccountProblemSnippetListRaw(requestParameters: GetAccountProblemSnippetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheGetAccountProblemSnippetListMethod>> {
        if (requestParameters.requestBodyOfTheGetAccountProblemSnippetListMethod === null || requestParameters.requestBodyOfTheGetAccountProblemSnippetListMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheGetAccountProblemSnippetListMethod','Required parameter requestParameters.requestBodyOfTheGetAccountProblemSnippetListMethod was null or undefined when calling getAccountProblemSnippetList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#get_account_problem_snippet_list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheGetAccountProblemSnippetListMethodToJSON(requestParameters.requestBodyOfTheGetAccountProblemSnippetListMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheGetAccountProblemSnippetListMethodFromJSON(jsonValue));
    }

    /**
     */
    async getAccountProblemSnippetList(requestParameters: GetAccountProblemSnippetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheGetAccountProblemSnippetListMethod> {
        const response = await this.getAccountProblemSnippetListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAccountProblemSubmissionSnippetListRaw(requestParameters: GetAccountProblemSubmissionSnippetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheGetAccountProblemSubmissionSnippetListMethod>> {
        if (requestParameters.requestBodyOfTheGetAccountProblemSubmissionSnippetListMethod === null || requestParameters.requestBodyOfTheGetAccountProblemSubmissionSnippetListMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheGetAccountProblemSubmissionSnippetListMethod','Required parameter requestParameters.requestBodyOfTheGetAccountProblemSubmissionSnippetListMethod was null or undefined when calling getAccountProblemSubmissionSnippetList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#get_account_problem_submission_snippet_list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheGetAccountProblemSubmissionSnippetListMethodToJSON(requestParameters.requestBodyOfTheGetAccountProblemSubmissionSnippetListMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheGetAccountProblemSubmissionSnippetListMethodFromJSON(jsonValue));
    }

    /**
     */
    async getAccountProblemSubmissionSnippetList(requestParameters: GetAccountProblemSubmissionSnippetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheGetAccountProblemSubmissionSnippetListMethod> {
        const response = await this.getAccountProblemSubmissionSnippetListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAccountSubmissionSnippetListRaw(requestParameters: GetAccountSubmissionSnippetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheGetAccountSubmissionSnippetListMethod>> {
        if (requestParameters.requestBodyOfTheGetAccountSubmissionSnippetListMethod === null || requestParameters.requestBodyOfTheGetAccountSubmissionSnippetListMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheGetAccountSubmissionSnippetListMethod','Required parameter requestParameters.requestBodyOfTheGetAccountSubmissionSnippetListMethod was null or undefined when calling getAccountSubmissionSnippetList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#get_account_submission_snippet_list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheGetAccountSubmissionSnippetListMethodToJSON(requestParameters.requestBodyOfTheGetAccountSubmissionSnippetListMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheGetAccountSubmissionSnippetListMethodFromJSON(jsonValue));
    }

    /**
     */
    async getAccountSubmissionSnippetList(requestParameters: GetAccountSubmissionSnippetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheGetAccountSubmissionSnippetListMethod> {
        const response = await this.getAccountSubmissionSnippetListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getProblemRaw(requestParameters: GetProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheGetProblemMethod>> {
        if (requestParameters.requestBodyOfTheGetProblemMethod === null || requestParameters.requestBodyOfTheGetProblemMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheGetProblemMethod','Required parameter requestParameters.requestBodyOfTheGetProblemMethod was null or undefined when calling getProblem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#get_problem`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheGetProblemMethodToJSON(requestParameters.requestBodyOfTheGetProblemMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheGetProblemMethodFromJSON(jsonValue));
    }

    /**
     */
    async getProblem(requestParameters: GetProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheGetProblemMethod> {
        const response = await this.getProblemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getProblemSnippetListRaw(requestParameters: GetProblemSnippetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheGetProblemSnippetListMethod>> {
        if (requestParameters.requestBodyOfTheGetProblemSnippetListMethod === null || requestParameters.requestBodyOfTheGetProblemSnippetListMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheGetProblemSnippetListMethod','Required parameter requestParameters.requestBodyOfTheGetProblemSnippetListMethod was null or undefined when calling getProblemSnippetList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#get_problem_snippet_list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheGetProblemSnippetListMethodToJSON(requestParameters.requestBodyOfTheGetProblemSnippetListMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheGetProblemSnippetListMethodFromJSON(jsonValue));
    }

    /**
     */
    async getProblemSnippetList(requestParameters: GetProblemSnippetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheGetProblemSnippetListMethod> {
        const response = await this.getProblemSnippetListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getProblemSubmissionSnippetListRaw(requestParameters: GetProblemSubmissionSnippetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheGetProblemSubmissionSnippetListMethod>> {
        if (requestParameters.requestBodyOfTheGetProblemSubmissionSnippetListMethod === null || requestParameters.requestBodyOfTheGetProblemSubmissionSnippetListMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheGetProblemSubmissionSnippetListMethod','Required parameter requestParameters.requestBodyOfTheGetProblemSubmissionSnippetListMethod was null or undefined when calling getProblemSubmissionSnippetList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#get_problem_submission_snippet_list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheGetProblemSubmissionSnippetListMethodToJSON(requestParameters.requestBodyOfTheGetProblemSubmissionSnippetListMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheGetProblemSubmissionSnippetListMethodFromJSON(jsonValue));
    }

    /**
     */
    async getProblemSubmissionSnippetList(requestParameters: GetProblemSubmissionSnippetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheGetProblemSubmissionSnippetListMethod> {
        const response = await this.getProblemSubmissionSnippetListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getProblemTestCaseSnippetListRaw(requestParameters: GetProblemTestCaseSnippetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheGetProblemTestCaseSnippetListMethod>> {
        if (requestParameters.requestBodyOfTheGetProblemTestCaseSnippetListMethod === null || requestParameters.requestBodyOfTheGetProblemTestCaseSnippetListMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheGetProblemTestCaseSnippetListMethod','Required parameter requestParameters.requestBodyOfTheGetProblemTestCaseSnippetListMethod was null or undefined when calling getProblemTestCaseSnippetList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#get_problem_test_case_snippet_list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheGetProblemTestCaseSnippetListMethodToJSON(requestParameters.requestBodyOfTheGetProblemTestCaseSnippetListMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheGetProblemTestCaseSnippetListMethodFromJSON(jsonValue));
    }

    /**
     */
    async getProblemTestCaseSnippetList(requestParameters: GetProblemTestCaseSnippetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheGetProblemTestCaseSnippetListMethod> {
        const response = await this.getProblemTestCaseSnippetListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getServerInfoRaw(requestParameters: GetServerInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheGetServerInfoMethod>> {
        if (requestParameters.requestBodyOfTheGetServerInfoMethod === null || requestParameters.requestBodyOfTheGetServerInfoMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheGetServerInfoMethod','Required parameter requestParameters.requestBodyOfTheGetServerInfoMethod was null or undefined when calling getServerInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#get_server_info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheGetServerInfoMethodToJSON(requestParameters.requestBodyOfTheGetServerInfoMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheGetServerInfoMethodFromJSON(jsonValue));
    }

    /**
     */
    async getServerInfo(requestParameters: GetServerInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheGetServerInfoMethod> {
        const response = await this.getServerInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSessionRaw(requestParameters: GetSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheGetSessionMethod>> {
        if (requestParameters.requestBodyOfTheGetSessionMethod === null || requestParameters.requestBodyOfTheGetSessionMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheGetSessionMethod','Required parameter requestParameters.requestBodyOfTheGetSessionMethod was null or undefined when calling getSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#get_session`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheGetSessionMethodToJSON(requestParameters.requestBodyOfTheGetSessionMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheGetSessionMethodFromJSON(jsonValue));
    }

    /**
     */
    async getSession(requestParameters: GetSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheGetSessionMethod> {
        const response = await this.getSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSubmissionRaw(requestParameters: GetSubmissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheGetSubmissionMethod>> {
        if (requestParameters.requestBodyOfTheGetSubmissionMethod === null || requestParameters.requestBodyOfTheGetSubmissionMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheGetSubmissionMethod','Required parameter requestParameters.requestBodyOfTheGetSubmissionMethod was null or undefined when calling getSubmission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#get_submission`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheGetSubmissionMethodToJSON(requestParameters.requestBodyOfTheGetSubmissionMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheGetSubmissionMethodFromJSON(jsonValue));
    }

    /**
     */
    async getSubmission(requestParameters: GetSubmissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheGetSubmissionMethod> {
        const response = await this.getSubmissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSubmissionSnippetListRaw(requestParameters: GetSubmissionSnippetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheGetSubmissionSnippetListMethod>> {
        if (requestParameters.requestBodyOfTheGetSubmissionSnippetListMethod === null || requestParameters.requestBodyOfTheGetSubmissionSnippetListMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheGetSubmissionSnippetListMethod','Required parameter requestParameters.requestBodyOfTheGetSubmissionSnippetListMethod was null or undefined when calling getSubmissionSnippetList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#get_submission_snippet_list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheGetSubmissionSnippetListMethodToJSON(requestParameters.requestBodyOfTheGetSubmissionSnippetListMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheGetSubmissionSnippetListMethodFromJSON(jsonValue));
    }

    /**
     */
    async getSubmissionSnippetList(requestParameters: GetSubmissionSnippetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheGetSubmissionSnippetListMethod> {
        const response = await this.getSubmissionSnippetListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTestCaseRaw(requestParameters: GetTestCaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheGetTestCaseMethod>> {
        if (requestParameters.requestBodyOfTheGetTestCaseMethod === null || requestParameters.requestBodyOfTheGetTestCaseMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheGetTestCaseMethod','Required parameter requestParameters.requestBodyOfTheGetTestCaseMethod was null or undefined when calling getTestCase.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#get_test_case`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheGetTestCaseMethodToJSON(requestParameters.requestBodyOfTheGetTestCaseMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheGetTestCaseMethodFromJSON(jsonValue));
    }

    /**
     */
    async getTestCase(requestParameters: GetTestCaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheGetTestCaseMethod> {
        const response = await this.getTestCaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateAccountRaw(requestParameters: UpdateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheUpdateAccountMethod>> {
        if (requestParameters.requestBodyOfTheUpdateAccountMethod === null || requestParameters.requestBodyOfTheUpdateAccountMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheUpdateAccountMethod','Required parameter requestParameters.requestBodyOfTheUpdateAccountMethod was null or undefined when calling updateAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#update_account`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheUpdateAccountMethodToJSON(requestParameters.requestBodyOfTheUpdateAccountMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheUpdateAccountMethodFromJSON(jsonValue));
    }

    /**
     */
    async updateAccount(requestParameters: UpdateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheUpdateAccountMethod> {
        const response = await this.updateAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateProblemRaw(requestParameters: UpdateProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheUpdateProblemMethod>> {
        if (requestParameters.requestBodyOfTheUpdateProblemMethod === null || requestParameters.requestBodyOfTheUpdateProblemMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheUpdateProblemMethod','Required parameter requestParameters.requestBodyOfTheUpdateProblemMethod was null or undefined when calling updateProblem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#update_problem`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheUpdateProblemMethodToJSON(requestParameters.requestBodyOfTheUpdateProblemMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheUpdateProblemMethodFromJSON(jsonValue));
    }

    /**
     */
    async updateProblem(requestParameters: UpdateProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheUpdateProblemMethod> {
        const response = await this.updateProblemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateTestCaseRaw(requestParameters: UpdateTestCaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBodyOfTheUpdateTestCaseMethod>> {
        if (requestParameters.requestBodyOfTheUpdateTestCaseMethod === null || requestParameters.requestBodyOfTheUpdateTestCaseMethod === undefined) {
            throw new runtime.RequiredError('requestBodyOfTheUpdateTestCaseMethod','Required parameter requestParameters.requestBodyOfTheUpdateTestCaseMethod was null or undefined when calling updateTestCase.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/#update_test_case`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBodyOfTheUpdateTestCaseMethodToJSON(requestParameters.requestBodyOfTheUpdateTestCaseMethod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBodyOfTheUpdateTestCaseMethodFromJSON(jsonValue));
    }

    /**
     */
    async updateTestCase(requestParameters: UpdateTestCaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBodyOfTheUpdateTestCaseMethod> {
        const response = await this.updateTestCaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
