/* tslint:disable */
/* eslint-disable */
/**
 * API
 * Generated by genpjrpc: v0.4.0
 *
 * The version of the OpenAPI document: v0.0.0-unknown
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RpcSettingAccount } from './RpcSettingAccount';
import {
    RpcSettingAccountFromJSON,
    RpcSettingAccountFromJSONTyped,
    RpcSettingAccountToJSON,
} from './RpcSettingAccount';
import type { RpcSettingProblem } from './RpcSettingProblem';
import {
    RpcSettingProblemFromJSON,
    RpcSettingProblemFromJSONTyped,
    RpcSettingProblemToJSON,
} from './RpcSettingProblem';
import type { RpcSettingSubmission } from './RpcSettingSubmission';
import {
    RpcSettingSubmissionFromJSON,
    RpcSettingSubmissionFromJSONTyped,
    RpcSettingSubmissionToJSON,
} from './RpcSettingSubmission';

/**
 * 
 * @export
 * @interface RpcSetting
 */
export interface RpcSetting {
    /**
     * 
     * @type {RpcSettingAccount}
     * @memberof RpcSetting
     */
    account: RpcSettingAccount;
    /**
     * 
     * @type {RpcSettingProblem}
     * @memberof RpcSetting
     */
    problem: RpcSettingProblem;
    /**
     * 
     * @type {RpcSettingSubmission}
     * @memberof RpcSetting
     */
    submission: RpcSettingSubmission;
}

/**
 * Check if a given object implements the RpcSetting interface.
 */
export function instanceOfRpcSetting(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "account" in value;
    isInstance = isInstance && "problem" in value;
    isInstance = isInstance && "submission" in value;

    return isInstance;
}

export function RpcSettingFromJSON(json: any): RpcSetting {
    return RpcSettingFromJSONTyped(json, false);
}

export function RpcSettingFromJSONTyped(json: any, ignoreDiscriminator: boolean): RpcSetting {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'account': RpcSettingAccountFromJSON(json['Account']),
        'problem': RpcSettingProblemFromJSON(json['Problem']),
        'submission': RpcSettingSubmissionFromJSON(json['Submission']),
    };
}

export function RpcSettingToJSON(value?: RpcSetting | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Account': RpcSettingAccountToJSON(value.account),
        'Problem': RpcSettingProblemToJSON(value.problem),
        'Submission': RpcSettingSubmissionToJSON(value.submission),
    };
}

