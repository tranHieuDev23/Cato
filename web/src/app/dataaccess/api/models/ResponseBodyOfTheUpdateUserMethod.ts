/* tslint:disable */
/* eslint-disable */
/**
 * API
 * Generated by genpjrpc: v0.4.0
 *
 * The version of the OpenAPI document: v0.0.0-unknown
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RpcError } from './RpcError';
import {
    RpcErrorFromJSON,
    RpcErrorFromJSONTyped,
    RpcErrorToJSON,
} from './RpcError';
import type { RpcUpdateUserResponse } from './RpcUpdateUserResponse';
import {
    RpcUpdateUserResponseFromJSON,
    RpcUpdateUserResponseFromJSONTyped,
    RpcUpdateUserResponseToJSON,
} from './RpcUpdateUserResponse';

/**
 * 
 * @export
 * @interface ResponseBodyOfTheUpdateUserMethod
 */
export interface ResponseBodyOfTheUpdateUserMethod {
    /**
     * A String specifying the version of the JSON-RPC protocol. MUST be exactly "2.0".
     * @type {string}
     * @memberof ResponseBodyOfTheUpdateUserMethod
     */
    jsonrpc?: ResponseBodyOfTheUpdateUserMethodJsonrpcEnum;
    /**
     * It MUST be the same as the value of the id member in the Request.
     * @type {string}
     * @memberof ResponseBodyOfTheUpdateUserMethod
     */
    id?: string;
    /**
     * 
     * @type {RpcError}
     * @memberof ResponseBodyOfTheUpdateUserMethod
     */
    error?: RpcError;
    /**
     * 
     * @type {RpcUpdateUserResponse}
     * @memberof ResponseBodyOfTheUpdateUserMethod
     */
    result?: RpcUpdateUserResponse;
}


/**
 * @export
 */
export const ResponseBodyOfTheUpdateUserMethodJsonrpcEnum = {
    _20: '2.0'
} as const;
export type ResponseBodyOfTheUpdateUserMethodJsonrpcEnum = typeof ResponseBodyOfTheUpdateUserMethodJsonrpcEnum[keyof typeof ResponseBodyOfTheUpdateUserMethodJsonrpcEnum];


/**
 * Check if a given object implements the ResponseBodyOfTheUpdateUserMethod interface.
 */
export function instanceOfResponseBodyOfTheUpdateUserMethod(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ResponseBodyOfTheUpdateUserMethodFromJSON(json: any): ResponseBodyOfTheUpdateUserMethod {
    return ResponseBodyOfTheUpdateUserMethodFromJSONTyped(json, false);
}

export function ResponseBodyOfTheUpdateUserMethodFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResponseBodyOfTheUpdateUserMethod {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'jsonrpc': !exists(json, 'jsonrpc') ? undefined : json['jsonrpc'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'error': !exists(json, 'error') ? undefined : RpcErrorFromJSON(json['error']),
        'result': !exists(json, 'result') ? undefined : RpcUpdateUserResponseFromJSON(json['result']),
    };
}

export function ResponseBodyOfTheUpdateUserMethodToJSON(value?: ResponseBodyOfTheUpdateUserMethod | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'jsonrpc': value.jsonrpc,
        'id': value.id,
        'error': RpcErrorToJSON(value.error),
        'result': RpcUpdateUserResponseToJSON(value.result),
    };
}

