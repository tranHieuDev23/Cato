/* tslint:disable */
/* eslint-disable */
/**
 * API
 * Generated by genpjrpc: v0.4.0
 *
 * The version of the OpenAPI document: v0.0.0-unknown
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RpcCreateProblemResponseAuthor } from './RpcCreateProblemResponseAuthor';
import {
    RpcCreateProblemResponseAuthorFromJSON,
    RpcCreateProblemResponseAuthorFromJSONTyped,
    RpcCreateProblemResponseAuthorToJSON,
} from './RpcCreateProblemResponseAuthor';
import type { RpcSubmissionProblem } from './RpcSubmissionProblem';
import {
    RpcSubmissionProblemFromJSON,
    RpcSubmissionProblemFromJSONTyped,
    RpcSubmissionProblemToJSON,
} from './RpcSubmissionProblem';
import type { RpcSubmissionStatus } from './RpcSubmissionStatus';
import {
    RpcSubmissionStatusFromJSON,
    RpcSubmissionStatusFromJSONTyped,
    RpcSubmissionStatusToJSON,
} from './RpcSubmissionStatus';

/**
 * 
 * @export
 * @interface RpcSubmission
 */
export interface RpcSubmission {
    /**
     * 
     * @type {number}
     * @memberof RpcSubmission
     */
    iD: number;
    /**
     * 
     * @type {RpcSubmissionProblem}
     * @memberof RpcSubmission
     */
    problem: RpcSubmissionProblem;
    /**
     * 
     * @type {RpcCreateProblemResponseAuthor}
     * @memberof RpcSubmission
     */
    author: RpcCreateProblemResponseAuthor;
    /**
     * 
     * @type {string}
     * @memberof RpcSubmission
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof RpcSubmission
     */
    language: string;
    /**
     * 
     * @type {RpcSubmissionStatus}
     * @memberof RpcSubmission
     */
    status: RpcSubmissionStatus;
    /**
     * 
     * @type {number}
     * @memberof RpcSubmission
     */
    createdTime: number;
}

/**
 * Check if a given object implements the RpcSubmission interface.
 */
export function instanceOfRpcSubmission(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "iD" in value;
    isInstance = isInstance && "problem" in value;
    isInstance = isInstance && "author" in value;
    isInstance = isInstance && "content" in value;
    isInstance = isInstance && "language" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "createdTime" in value;

    return isInstance;
}

export function RpcSubmissionFromJSON(json: any): RpcSubmission {
    return RpcSubmissionFromJSONTyped(json, false);
}

export function RpcSubmissionFromJSONTyped(json: any, ignoreDiscriminator: boolean): RpcSubmission {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'iD': json['ID'],
        'problem': RpcSubmissionProblemFromJSON(json['Problem']),
        'author': RpcCreateProblemResponseAuthorFromJSON(json['Author']),
        'content': json['Content'],
        'language': json['Language'],
        'status': RpcSubmissionStatusFromJSON(json['Status']),
        'createdTime': json['CreatedTime'],
    };
}

export function RpcSubmissionToJSON(value?: RpcSubmission | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ID': value.iD,
        'Problem': RpcSubmissionProblemToJSON(value.problem),
        'Author': RpcCreateProblemResponseAuthorToJSON(value.author),
        'Content': value.content,
        'Language': value.language,
        'Status': RpcSubmissionStatusToJSON(value.status),
        'CreatedTime': value.createdTime,
    };
}

