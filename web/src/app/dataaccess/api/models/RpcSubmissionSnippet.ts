/* tslint:disable */
/* eslint-disable */
/**
 * API
 * Generated by genpjrpc: v0.4.0
 *
 * The version of the OpenAPI document: v0.0.0-unknown
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RpcCreateAccountResponseAccount } from './RpcCreateAccountResponseAccount';
import {
    RpcCreateAccountResponseAccountFromJSON,
    RpcCreateAccountResponseAccountFromJSONTyped,
    RpcCreateAccountResponseAccountToJSON,
} from './RpcCreateAccountResponseAccount';
import type { RpcSubmissionProblem } from './RpcSubmissionProblem';
import {
    RpcSubmissionProblemFromJSON,
    RpcSubmissionProblemFromJSONTyped,
    RpcSubmissionProblemToJSON,
} from './RpcSubmissionProblem';

/**
 * 
 * @export
 * @interface RpcSubmissionSnippet
 */
export interface RpcSubmissionSnippet {
    /**
     * 
     * @type {number}
     * @memberof RpcSubmissionSnippet
     */
    iD: number;
    /**
     * 
     * @type {RpcSubmissionProblem}
     * @memberof RpcSubmissionSnippet
     */
    problem: RpcSubmissionProblem;
    /**
     * 
     * @type {RpcCreateAccountResponseAccount}
     * @memberof RpcSubmissionSnippet
     */
    author: RpcCreateAccountResponseAccount;
    /**
     * 
     * @type {string}
     * @memberof RpcSubmissionSnippet
     */
    language: string;
    /**
     * 
     * @type {number}
     * @memberof RpcSubmissionSnippet
     */
    status: number;
    /**
     * 
     * @type {number}
     * @memberof RpcSubmissionSnippet
     */
    result: number;
    /**
     * 
     * @type {number}
     * @memberof RpcSubmissionSnippet
     */
    createdTime: number;
}

/**
 * Check if a given object implements the RpcSubmissionSnippet interface.
 */
export function instanceOfRpcSubmissionSnippet(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "iD" in value;
    isInstance = isInstance && "problem" in value;
    isInstance = isInstance && "author" in value;
    isInstance = isInstance && "language" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "result" in value;
    isInstance = isInstance && "createdTime" in value;

    return isInstance;
}

export function RpcSubmissionSnippetFromJSON(json: any): RpcSubmissionSnippet {
    return RpcSubmissionSnippetFromJSONTyped(json, false);
}

export function RpcSubmissionSnippetFromJSONTyped(json: any, ignoreDiscriminator: boolean): RpcSubmissionSnippet {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'iD': json['ID'],
        'problem': RpcSubmissionProblemFromJSON(json['Problem']),
        'author': RpcCreateAccountResponseAccountFromJSON(json['Author']),
        'language': json['Language'],
        'status': json['Status'],
        'result': json['Result'],
        'createdTime': json['CreatedTime'],
    };
}

export function RpcSubmissionSnippetToJSON(value?: RpcSubmissionSnippet | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ID': value.iD,
        'Problem': RpcSubmissionProblemToJSON(value.problem),
        'Author': RpcCreateAccountResponseAccountToJSON(value.author),
        'Language': value.language,
        'Status': value.status,
        'Result': value.result,
        'CreatedTime': value.createdTime,
    };
}

