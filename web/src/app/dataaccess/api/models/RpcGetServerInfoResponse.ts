/* tslint:disable */
/* eslint-disable */
/**
 * API
 * Generated by genpjrpc: v0.4.0
 *
 * The version of the OpenAPI document: v0.0.0-unknown
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RpcGetServerInfoResponseSetting } from './RpcGetServerInfoResponseSetting';
import {
    RpcGetServerInfoResponseSettingFromJSON,
    RpcGetServerInfoResponseSettingFromJSONTyped,
    RpcGetServerInfoResponseSettingToJSON,
} from './RpcGetServerInfoResponseSetting';
import type { RpcLanguage } from './RpcLanguage';
import {
    RpcLanguageFromJSON,
    RpcLanguageFromJSONTyped,
    RpcLanguageToJSON,
} from './RpcLanguage';

/**
 * 
 * @export
 * @interface RpcGetServerInfoResponse
 */
export interface RpcGetServerInfoResponse {
    /**
     * 
     * @type {boolean}
     * @memberof RpcGetServerInfoResponse
     */
    isDistributed: boolean;
    /**
     * 
     * @type {Array<RpcLanguage>}
     * @memberof RpcGetServerInfoResponse
     */
    supportedLanguageList: Array<RpcLanguage>;
    /**
     * 
     * @type {RpcGetServerInfoResponseSetting}
     * @memberof RpcGetServerInfoResponse
     */
    setting: RpcGetServerInfoResponseSetting;
}

/**
 * Check if a given object implements the RpcGetServerInfoResponse interface.
 */
export function instanceOfRpcGetServerInfoResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "isDistributed" in value;
    isInstance = isInstance && "supportedLanguageList" in value;
    isInstance = isInstance && "setting" in value;

    return isInstance;
}

export function RpcGetServerInfoResponseFromJSON(json: any): RpcGetServerInfoResponse {
    return RpcGetServerInfoResponseFromJSONTyped(json, false);
}

export function RpcGetServerInfoResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): RpcGetServerInfoResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'isDistributed': json['IsDistributed'],
        'supportedLanguageList': ((json['SupportedLanguageList'] as Array<any>).map(RpcLanguageFromJSON)),
        'setting': RpcGetServerInfoResponseSettingFromJSON(json['Setting']),
    };
}

export function RpcGetServerInfoResponseToJSON(value?: RpcGetServerInfoResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'IsDistributed': value.isDistributed,
        'SupportedLanguageList': ((value.supportedLanguageList as Array<any>).map(RpcLanguageToJSON)),
        'Setting': RpcGetServerInfoResponseSettingToJSON(value.setting),
    };
}

